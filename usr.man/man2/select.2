.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)select.2	8.2 (Berkeley) 3/25/94
.\"
.TH SELECT 2 "15 January 1997" GNO "System Calls"
.SH NAME
.BR select
\- synchronous I/O multiplexing
.SH SYNOPSIS
#include <sys/types.h>
.br
#include <sys/time.h>
.br
#include <unistd.h>
.sp 1
int
\fBselect\fR (int \fInfds\fR, fd_set *\fIreadfds\fR, fd_set *\fIwritefds\fR, fd_set *\fIexceptfds\fR, struct timeval *\fItimeout\fR);
.sp 1
.BR FD_SET
.RI "(int " fd ", fd_set &" fdset );
.br
.BR FD_CLR
.RI "(int " fd ", fd_set &" fdset );
.br
.BR FD_ISSET
.RI "(int " fd ", fd_set &" fdset );
.br
.BR FD_ZERO
.RI "(fd_set &" fdset );
.SH DESCRIPTION
.BR Select 
examines the I/O descriptor sets whose addresses are passed in
.IR readfds ,
.IR writefds ,
and
.I exceptfds
to see if some of their descriptors
are ready for reading, are ready for writing, or have an exceptional
condition pending, respectively.
The first
.I nfds
descriptors are checked in each set;
i.e., the descriptors from 0 through
.RI ( nfds )
in the descriptor sets are examined.
On return,
.BR select 
replaces the given descriptor sets
with subsets consisting of those descriptors that are ready
for the requested operation.
.BR Select 
returns the total number of ready descriptors in all the sets.
.LP
The descriptor sets are stored as bit fields in arrays of integers.
The following macros are provided for manipulating such descriptor sets:
\fBFD_ZERO\fR(&\fIfdsetx\fR)
initializes a descriptor set
.I fdset
to the null set.
\fBFD_SET\fR(\fIfd\fR, &\fIfdset\fR)
includes a particular descriptor
.I fd
in
.IR fdset .
\fBFD_CLR\fR(\fIfd\fR, &\fIfdset\fR)
removes
.I fd
from
.IR fdset .
\fBFD_ISSET\fR(\fIfd\fR, &\fIfdset)\fR
is non-zero if
.I fd
is a member of
.IR fdset ,
zero otherwise.
The behavior of these macros is undefined if
a descriptor value is less than zero or greater than or equal to
.BR FD_SETSIZE ,
which is normally at least equal
to the maximum number of descriptors supported by the system.
.LP
If
.I timeout
is a non-NULL pointer, it specifies a maximum interval to wait for the
selection to complete.  If 
.I timeout
is a NULL pointer, the select blocks indefinitely.  To affect a poll, the
.I timeout
argument should be non-NULL, pointing to a zero-valued timeval structure.
.LP
Any of
.IR readfds ,
.IR writefds ,
and
.I exceptfds
may be given as NULL pointers if no descriptors are of interest.
.SH RETURN VALUES
.BR Select 
returns the number of ready descriptors that are contained in
the descriptor sets,
or -1 if an error occurred.
If the time limit expires,
.BR select 
returns 0.
If
.BR select 
returns with an error,
including one due to an interrupted call,
the descriptor sets will be unmodified.
.SH ERRORS
An error return from
.BR select 
indicates:
.RS
.IP \fBEBADF\fR
One of the descriptor sets specified an invalid descriptor.
.IP \fBEINTR\fR
A signal was delivered before the time limit expired and
before any of the selected events occurred.
.IP \fBEINVAL\fR
The specified time limit is invalid.  One of its components is
negative or too large.
.RE
.SH SEE ALSO
.BR accept (2),
.BR connect (2),
.BR getdtablesize (2),
.BR gettimeofday (2),
.BR read (2),
.BR recv (2),
.BR send (2),
.BR write (2),
.BR clocks (7)
.SH BUGS
Although the provision of
.BR getdtablesize (2)
was intended to allow user programs to be written independent
of the kernel limit on the number of open files, the dimension
of a sufficiently large bit field for select remains a problem.
The default size
.BR FD_SETSIZE
(currently 32 for GNO) is somewhat larger than
the current kernel limit to the number of open files.
Unlike BSD systems, under GNO it is not possible for sites to reconfigure
this limit since it requires recompilation of the kernel.
.LP
.BR Select 
should probably return the time remaining from the original timeout,
if any, by modifying the time value in place.
This may be implemented in future versions of the system.
Thus, it is unwise to assume that the timeout value will be unmodified
by the
.BR select 
call.
.SH HISTORY
The
.BR select
function call appeared in 4.2BSD.
The first appearance in GNO was in v2.0.5.
