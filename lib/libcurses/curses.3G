.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)curses.3	8.1 (Berkeley) 6/4/93
.\"
.TH CURSES 3 "September 1997" GNO "Library Routines"
.SH NAME
.BR curses
\- screen functions with ``optimal
.SH SYNOPSIS
.BR occ
.I -flags
.B -L/usr/lib
.I files
.B -llibcurses
.B -llibtermcap
.SH DESCRIPTION
These routines give the user a method of updating screens with reasonable
optimization.  They keep an image of the current screen,
and the user sets up an image of a new one.  Then the
.BR refresh 
tells the routines to make the current screen look like the new one.
In order to initialize the routines, the routine
.BR initscr 
must be called before any of the other routines that deal with windows and
screens are used.  The routine
.BR endwin 
should be called before exiting.
.SH SEE ALSO
.BR ioctl (2),
.BR getenv (3),
.BR tty (4),
.BR termcap (5)
.sp 1
.I Screen Updating and Cursor Movement Optimization: A Library Package
by Ken Arnold.
.SH AUTHOR
Ken Arnold
.SH FUNCTIONS
.\" These were originally in a table layout
.IP \fBaddch\fR(\fIch\fR)
add a character to
.IR stdscr 
.IP \fBaddstr\fR(\fIstr\fR)
add a string to
.IR stdscr 
.IP \fBbox\fR(\fIwin\fR,\fIvert\fR,\fIhor\fR)
draw a box around a window
.IP \fBcbreak\fR()
set cbreak mode
.IP \fBclear\fR()
clear
.IR stdscr 
.IP \fBclearok\fR(\fIscr\fR,\fIboolf\fR)
set clear flag for
.IR scr 
.IP \fBclrtobot\fR()
clear to bottom on
.IR stdscr 
.IP \fBclrtoeol\fR()
clear to end of line on
.IR stdscr 
.IP \fBdelch\fR()
delete a character
.IP \fBdeleteln\fR()
delete a line
.IP \fBdelwin\fR(\fIwin\fR)
delete
.IR stdscr 
.IP \fBecho\fR()
set echo mode
.IP \fBendwin\fR()
end window modes
.IP \fBerase\fR()
erase
.IR stdscr 
.IP \fBflusok\fR(\fIwin\fR,\fIboolf\fR)
set flush-on-refresh flag for
.IR win 
.IP \fBgetch\fR()
get a char through
.IR stdscr 
.IP \fBgetcap\fR(\fIname\fR)
get terminal capability
.IR name 
.IP \fBgetstr\fR(\fIstr\fR)
get a string through
.IR stdscr 
.IP \fBgettmode\fR()
get tty modes
.IP \fBgetyx\fR(\fIwin\fR,\fIy\fR,\fIx\fR)
get \fR(\fIy\fR,\fIx\fR) co-ordinates
.IP \fBinch\fR()
get char at current \fR(\fIy\fR,\fIx\fR) co-ordinates
.IP \fBinitscr\fR()
initialize screens
.IP \fBinsch\fR(\fIc\fR)
insert a char
.IP \fBinsertln\fR()
insert a line
.IP \fBleaveok\fR(\fIwin\fR,\fIboolf\fR)
set leave flag for
.IR stdscr 
.IP \fBlongname\fR(\fItermbuf\fR,\fIname\fR)
get long name from
.IR termbuf 
.IP \fBmove\fR(\fIy\fR,\fIx\fR)
move to \fR(\fIy\fR,\fIx\fR) on
.IR stdscr 
.IP \fBmvcur\fR(\fIlasty\fR,\fIlastx\fR,\fInewy\fR,\fInewx\fR)
actually move cursor
.IP \fBnewwin\fR(\fIlines\fR,\fIcols\fR,\fIbegin_y\fR,\fIbegin_x\fR)
create a new window
.IP \fBnl\fR()
set newline mapping
.IP \fBnocbreak\fR()
unset cbreak mode
.IP \fBnoecho\fR()
unset echo mode
.IP \fBnonl\fR()
unset newline mapping
.IP \fBnoraw\fR()
unset raw mode
.IP \fBoverlay\fR(\fIwin1\fR,\fIwin2\fR)
overlay win1 on win2
.IP \fBoverwrite\fR(\fIwin1\fR,\fIwin2\fR)
overwrite win1 on top of win2
.IP \fBprintw\fR(\fIfmt\fR,\fIarg1\fR,\fIarg2\fR,...)
printf on
.IR stdscr 
.IP \fBraw\fR()
set raw mode
.IP \fBrefresh\fR()
make current screen look like
.IR stdscr 
.IP \fBresetty\fR()
reset tty flags to stored value
.IP \fBsavetty\fR()
stored current tty flags
.IP \fBscanw\fR(\fIfmt\fR,\fIarg1\fR,\fIarg2\fR,...)
scanf through
.IR stdscr 
.IP \fBscroll\fR(\fIwin\fR)
scroll
.IR win 
one line
.IP \fBscrollok\fR(\fIwin\fR,\fIboolf\fR)
set scroll flag
.IP \fBsetterm\fR(\fIname\fR)
set term variables for name
.IP \fBstandend\fR()
end standout mode
.IP \fBstandout\fR()
start standout mode
.IP \fBsubwin\fR(\fIwin\fR,\fIlines\fR,\fIcols\fR,\fIbegin_y\fR,\fIbegin_x\fR)
create a subwindow
.IP \fBtouchline\fR(\fIwin\fR,\fIy\fR,\fIsx\fR,\fIex\fR)
mark line
.IR y 
.IR sx 
through
.IR sy 
as changed
.IP \fBtouchoverlap\fR(\fIwin1\fR,\fIwin2\fR)
mark overlap of
.IR win1 
on
.IR win2 
as changed
.IP \fBtouchwin\fR(\fIwin\fR)
change all of
.IR win 
.IP \fBunctrl\fR(\fIch\fR)
printable version of
.IR ch 
.IP \fBwaddch\fR(\fIwin\fR,\fIch\fR)
add char to
.IR win 
.IP \fBwaddstr\fR(\fIwin\fR,\fIstr\fR)
add string to
.IR win 
.IP \fBwclear\fR(\fIwin\fR)
clear
.IR win 
.IP \fBwclrtobot\fR(\fIwin\fR)
clear to bottom of
.IR win 
.IP \fBwclrtoeol\fR(\fIwin\fR)
clear to end of line on
.IR win 
.IP \fBwdelch\fR(\fIwin\fR,\fIc\fR)
delete char from
.IR win 
.IP \fBwdeleteln\fR(\fIwin\fR)
delete line from
.IR win 
.IP \fBwerase\fR(\fIwin\fR)
erase
.IR win 
.IP \fBwgetch\fR(\fIwin\fR)
get a char through
.IR win 
.IP \fBwgetstr\fR(\fIwin\fR,\fIstr\fR)
get a string through
.IR win 
.IP \fBwinch\fR(\fIwin\fR)
get char at current \fR(\fIy\fR,\fIx\fR) in
.IR win 
.IP \fBwinsch\fR(\fIwin\fR,\fIc\fR)
insert char into
.IR win 
.IP \fBwinsertln\fR(\fIwin\fR)
insert line into
.IR win 
.IP \fBwmove\fR(\fIwin\fR,\fIy\fR,\fIx\fR)
set current \fR(\fIy\fR,\fIx\fR) co-ordinates on
.IR win 
.IP \fBwprintw\fR(\fIwin\fR,\fIfmt\fR,\fIarg1\fR,\fIarg2\fR,...)
printf on
.IR win 
.IP \fBwrefresh\fR(\fIwin\fR)
make screen look like
.IR win 
.IP \fBwscanw\fR(\fIwin\fR,\fIfmt\fR,\fIarg1\fR,\fIarg2\fR,...)
scanf through
.IR win 
.IP \fBwstandend\fR(\fIwin\fR)
end standout mode on
.IR win 
.IP \fBwstandout\fR(\fIwin\fR)
start standout mode on
.IR win 
.RE
.SH HISTORY
This package first appeared in 4.0BSD.
